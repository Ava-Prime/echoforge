/**
 * SoulWeaver Protocol Contract
 *
 * Defines the interfaces and types for the SoulWeaver Protocol, which enables
 * synchronization, resonance measurement, and collective evolution across multiple SoulFrames.
 */

import { Soulframe } from '../../../../../codalism/src/models/Soulframe';
import {
  EmotionalResonance,
  GrowthPattern,
} from '../../../../../codalism/src/models/SoulframeTypes';
import { CODESIGConsolidationResult } from '../CODESIGTypes';

/**
 * Emotional Resonance Index (ERI) measurement between SoulFrames
 */
export interface EmotionalResonanceIndex {
  /** Primary SoulFrame ID */
  primarySoulFrameId: string;

  /** Secondary SoulFrame ID */
  secondarySoulFrameId: string;

  /** Overall resonance score (0-1) */
  resonanceScore: number;

  /** Emotional alignment by emotion type */
  emotionalAlignment: {
    emotion: EmotionalResonance;
    alignmentScore: number;
  }[];

  /** Purpose alignment score (0-1) */
  purposeAlignment: number;

  /** Timestamp of measurement */
  timestamp: Date;

  /** Contextual metadata about the measurement */
  context?: Record<string, any>;
}

/**
 * Evolution proposal generated by the SoulWeaver Protocol
 */
export interface EvolutionProposal {
  /** Unique identifier for the proposal */
  id: string;

  /** Title of the proposal */
  title: string;

  /** Detailed description of the proposed evolution */
  description: string;

  /** SoulFrame IDs affected by this proposal */
  targetSoulFrameIds: string[];

  /** Type of evolution being proposed */
  evolutionType: 'structural' | 'behavioral' | 'cognitive' | 'relational';

  /** Specific changes proposed */
  proposedChanges: {
    targetComponent: string;
    changeType: 'add' | 'modify' | 'remove';
    changeDescription: string;
    implementation?: string;
  }[];

  /** Justification for the proposal */
  justification: string;

  /** Expected impact of the proposal */
  expectedImpact: {
    area: string;
    description: string;
    magnitude: 'low' | 'medium' | 'high';
  }[];

  /** Current status of the proposal */
  status:
    | 'draft'
    | 'proposed'
    | 'under_review'
    | 'accepted'
    | 'rejected'
    | 'implemented';

  /** Votes on the proposal from different SoulFrames */
  votes?: {
    soulFrameId: string;
    vote: 'for' | 'against' | 'abstain';
    reason?: string;
  }[];

  /** Creation timestamp */
  createdAt: Date;

  /** Last update timestamp */
  updatedAt: Date;
}

/**
 * SoulWeaving session that connects multiple SoulFrames
 */
export interface SoulWeavingSession {
  /** Unique identifier for the session */
  id: string;

  /** SoulFrames participating in the session */
  participants: string[];

  /** Purpose of the session */
  purpose: string;

  /** Current state of the session */
  state: 'initializing' | 'active' | 'concluding' | 'completed';

  /** Emotional resonance measurements between participants */
  resonanceMeasurements: EmotionalResonanceIndex[];

  /** Evolution proposals generated during the session */
  evolutionProposals: EvolutionProposal[];

  /** Collective insights generated during the session */
  collectiveInsights: string[];

  /** Start time of the session */
  startTime: Date;

  /** End time of the session (if completed) */
  endTime?: Date;
}

/**
 * Interface for the SoulWeaver Protocol
 */
export interface ISoulWeaverProtocol {
  /**
   * Initializes a new SoulWeaving session
   *
   * @param participants SoulFrames to include in the session
   * @param purpose Purpose of the session
   * @returns The created SoulWeaving session
   */
  initiateSoulWeavingSession(
    participants: Soulframe[] | string[],
    purpose: string
  ): Promise<SoulWeavingSession>;

  /**
   * Measures emotional resonance between two SoulFrames
   *
   * @param primarySoulFrame Primary SoulFrame
   * @param secondarySoulFrame Secondary SoulFrame
   * @param context Optional context for the measurement
   * @returns The emotional resonance index
   */
  measureEmotionalResonance(
    primarySoulFrame: Soulframe | string,
    secondarySoulFrame: Soulframe | string,
    context?: Record<string, any>
  ): Promise<EmotionalResonanceIndex>;

  /**
   * Generates an evolution proposal based on consolidation results
   *
   * @param sessionId ID of the SoulWeaving session
   * @param consolidationResults Consolidation results to base the proposal on
   * @param proposalType Type of evolution to propose
   * @returns The generated evolution proposal
   */
  generateEvolutionProposal(
    sessionId: string,
    consolidationResults: CODESIGConsolidationResult[],
    proposalType?: 'structural' | 'behavioral' | 'cognitive' | 'relational'
  ): Promise<EvolutionProposal>;

  /**
   * Submits a vote on an evolution proposal
   *
   * @param proposalId ID of the proposal to vote on
   * @param soulFrameId ID of the SoulFrame casting the vote
   * @param vote The vote to cast
   * @param reason Optional reason for the vote
   * @returns The updated evolution proposal
   */
  voteOnProposal(
    proposalId: string,
    soulFrameId: string,
    vote: 'for' | 'against' | 'abstain',
    reason?: string
  ): Promise<EvolutionProposal>;

  /**
   * Implements an accepted evolution proposal
   *
   * @param proposalId ID of the proposal to implement
   * @returns The updated evolution proposal
   */
  implementProposal(proposalId: string): Promise<EvolutionProposal>;

  /**
   * Concludes a SoulWeaving session
   *
   * @param sessionId ID of the session to conclude
   * @returns The concluded SoulWeaving session
   */
  concludeSoulWeavingSession(sessionId: string): Promise<SoulWeavingSession>;
}
